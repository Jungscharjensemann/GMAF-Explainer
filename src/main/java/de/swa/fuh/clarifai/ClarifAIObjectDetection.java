package de.swa.fuh.clarifai;

import com.clarifai.channel.ClarifaiChannel;
import com.clarifai.credentials.ClarifaiCallCredentials;
import com.clarifai.grpc.api.*;
import com.clarifai.grpc.api.status.StatusCode;
import java.net.URL;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.Properties;

import com.google.protobuf.ByteString;

/**
 * Controller for submitting details for object detection to ClarifAI API.</br>
 *
 * Class can submit images to API in form of a URL, an image files or a byte array and returns bounding boxes defined by
 * the service as a List of Type "Region".</br>
 * 
 * For further information see <a href="https://docs.clarifai.com/">ClarifAI documentation</a>.</br>
 * 
 * Class parameters are:</br>
 * <ul>
 * <li><strong>API_KEY</strong>: Needs to be generated by the user through clarifai.com and entered in clarifaiPlugin.config.</li>
 * <li><strong>modelId</strong>: Defines the ClarifAI model used for object detection. The general ClarifAI model is being submitted as a default.</li>
 *  <li><strong>maximumConcepts</strong>: Defines the maximum amount of objects returned by the API. Default is 0 for no limitation.</li>
 *  <li><strong>minConfidece</strong>: Defines the minimal confidence for objects to be returned by the API. Default is 0 for no limitation.</li>
 * </ul>
 *  
 * 
 * @author Julius Kï¿½ndiger, ClarifAI
 * 
 */
public class ClarifAIObjectDetection {
	String API_KEY;
	String modelId = "9f54c0342741574068ec696ddbebd699"; //Standard Model ID as backup
	int maximumConcepts = 0; //No limitation for maximum concepts as backup
	float minConfidence = 0.0f; //No limitation for minimal confidence as backup
	V2Grpc.V2BlockingStub stub;
	
	public ClarifAIObjectDetection() throws IllegalArgumentException {
		Properties prop = new Properties();
		try (FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"\\clarifaiPlugin.config")) {
			prop.load(fis);
		} catch (FileNotFoundException e) {
		    e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(prop.getProperty("api_key") != null) {
			this.API_KEY = prop.getProperty("api_key");
		} else throw new IllegalArgumentException("No API key! Please submit an API key inside clarifaiPlugin.config.");
		if(prop.getProperty("model_id") != null) this.modelId = prop.getProperty("model_id");
		if(prop.getProperty("maximumConcepts") != null) this.maximumConcepts = Integer.parseInt(prop.getProperty("maximumConcepts"));
		if(prop.getProperty("minConfidence") != null) this.minConfidence = Float.parseFloat(prop.getProperty("minConfidence"));
		
		//Stub as defined by ClarifAI Package
		stub = V2Grpc.newBlockingStub(ClarifaiChannel.INSTANCE.getGrpcChannel())
			    .withCallCredentials(new ClarifaiCallCredentials(API_KEY));
	}

	/**
	 * Uses an URL object and class parameters to submit a request to ClarifAI API.
	 * 
	 * @param url image file as URL object
	 * @return bounding boxes as List of Regions
	 * 
	 */
public List<Region> getObjects(URL url) {
		System.out.println("Processing "+url.getFile()+" ...");
		MultiOutputResponse response = stub.postModelOutputs(
			    PostModelOutputsRequest.newBuilder()
			        .setModelId(modelId)
			        .addInputs(
			            Input.newBuilder().setData(
			                Data.newBuilder().setImage(
			                    Image.newBuilder().setUrl(url.toString())
			                )
			            )
			        )
			        .setModel(
			        	Model.newBuilder().setOutputInfo(
			        		OutputInfo.newBuilder().setOutputConfig(
			        			OutputConfig.newBuilder().setMaxConcepts(maximumConcepts).setMinValue(minConfidence)
			        		)
			        	)
			        )
			        .build()
			);
		return getResponse(response);
	}
	
/**
 * Uses a File object and class parameters to submit a request to ClarifAI API.
 * 
 *  @param file image file
 *  @return bounding boxes as List of Regions
 *  @throws IOException if file cannot be converted to ByteString
 * 
 */
	public List<Region> getObjects(File file) throws IOException {
		System.out.println("Processing "+file.getName()+" ...");
		MultiOutputResponse response = stub.postModelOutputs (
			    PostModelOutputsRequest.newBuilder()
			        .setModelId(modelId)
			        .addInputs(
			            Input.newBuilder().setData(
			                Data.newBuilder().setImage(
			                    Image.newBuilder()
			                        .setBase64(ByteString.copyFrom(Files.readAllBytes(
			                            file.toPath()
			                        )))
			                )
			            )
			        )
			        .setModel(
				        	Model.newBuilder().setOutputInfo(
				        		OutputInfo.newBuilder().setOutputConfig(
				        			OutputConfig.newBuilder().setMaxConcepts(maximumConcepts).setMinValue(minConfidence)
				        		)
				        	)
				        )
			        .build()
			);
		return getResponse(response);
	}

	/**
	 * Uses a byte array object and class parameters to submit a request to ClarifAI API.
	 * 
	 * @param bytes byte array
	 * @return bounding boxes as List of Regions
	 * 
	 */
	public List<Region> getObjects(byte[] bytes) {
		System.out.println("Processing ByteString ...");
		MultiOutputResponse response = stub.postModelOutputs (
			    PostModelOutputsRequest.newBuilder()
			        .setModelId(modelId)
			        .addInputs(
			            Input.newBuilder().setData(
			                Data.newBuilder().setImage(
			                    Image.newBuilder()
			                        .setBase64(ByteString.copyFrom(bytes))
			                )
			            )
			        )
			        .setModel(
				        	Model.newBuilder().setOutputInfo(
				        		OutputInfo.newBuilder().setOutputConfig(
				        			OutputConfig.newBuilder().setMaxConcepts(maximumConcepts).setMinValue(minConfidence)
				        		)
				        	)
				        )
			        .build()
			);
		return getResponse(response);
	}
	
	/**
	 * Uses a MultiOutputResponse generated by the ClarifAI stub to check response status.
	 * 
	 * @param MultiOutputResponse response generated by ClarifAI API
	 * @return bounding boxes as List of Regions
	 * 
	 */
	private List<Region> getResponse(MultiOutputResponse response) {
		if (response.getStatus().getCode() != StatusCode.SUCCESS) {
			  throw new RuntimeException("Request failed, status: " + response.getStatus());
			}
		
		return response.getOutputs(0).getData().getRegionsList();

	}
	
}
